@model CharityStartAtHome.Models.Blood

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    h1 {
        font-family: "Arial Black", Gadget, sans-serif;
        color: #2aaf8e;
        font-size: 50px;
        margin-left: 20px;
    }

    h2 {
        font-family: "Arial Black", Gadget, sans-serif;
        color: #2aaf8e;
        font-size: 30px;
        margin-left: 20px;
    }

    h3 {
        font-family: "Arial Black", Gadget, sans-serif;
        color: #2aaf8e;
        margin-left: 20px;
    }

    p {
        font-family: 'Arial Unicode MS';
    }
    hr.style-two {
        border: 0;
        height: 3px;
        background-image: linear-gradient(to right, rgba(0, 0, 0, 0), #2aaf8e, rgba(0, 0, 0, 0));
    }
    /*ul.breadcrumb {
        padding: 8px 16px;
        list-style: none;
        background-color: #eee;
    }

        ul.breadcrumb li {
            display: inline;
        }

            ul.breadcrumb li + li:before {
                padding: 8px;
                color: black;
                content: "/\00a0";
            }*/

    /*ul.breadcrumb li a {
                color: green;
            }*/
    dt {
        font-family: "Arial Black", Gadget, sans-serif;
        color: #2aaf8e;
        font-size: 15px;
        margin-left: 20px;
    }

    dd {
        font-family: 'Arial Unicode MS';
        font-size: 15px;
    }

    #map {
        height: 600px;
    }

    #Dropdown {
        color: black;
        top: 10px;
        left: 25%;
        z-index: 5;
        background-color: orange;
        padding: 5px;
        border: 1px solid blue;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
    }

    #floating-panel {
        position: absolute;
        top: 10px;
        left: 25%;
        z-index: 5;
        background-color: transparent;
        padding: 5px;
        border: 1px solid #999;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
    }

    #right-panel {
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
    }

        #right-panel select, #right-panel input {
            font-size: 15px;
        }

        #right-panel select {
            width: 100%;
        }

        #right-panel i {
            font-size: 12px;
        }

    #right-panel {
        height: 100%;
        float: right;
        width: 390px;
        overflow: auto;
    }

    #map {
        margin-right: 400px;
    }
    h4 {
        font-family: "Arial Black", Gadget, sans-serif;
        color: #2aaf8e;
        margin-left: 20px;
    }
    #floating-panel {
        background-color: transparent;
        padding: 5px;
        font-size: 15px;
        font-family: Arial;
        border: 1px solid #ccc;
        /*box-shadow: 0 2px 2px rgba(33, 33, 33, 0.4);*/
        display: none;

    }
    hr.style-two {
        border: 0;
        height: 3px;
        background-image: linear-gradient(to right, rgba(0, 0, 0, 0), #2aaf8e, rgba(0, 0, 0, 0));
    }
</style>

<ul class="breadcrumb" style="margin-top:50px">
    <li>@Html.ActionLink("What I can do", "Bloodm", "Bloods")</li>
    <li>@Html.ActionLink("Where I can give", "List", "Bloods")</li>
    <li style="color:black">Blood donation center </li>
</ul>
<div class="text-center">
    <h1>Where to donate</h1>
    <h2>@Html.DisplayFor(model => model.Center)</h2>
</div>

<div>
    <div class="row">
        <h4 class="col-sm-4 text-right">@Html.DisplayNameFor(model => model.Service):</h4> <label class="col-sm-5">Blood donation</label>
    </div>
    <div class="row">
        <h4 class="col-sm-4 text-right">Address: </h4> <label class="col-sm-5" id="address">@Html.DisplayFor(model => model.Address)</label>
    </div>
    <div class="row">
        <h4 class="col-sm-4 text-right">Open hour: </h4> <label class="col-sm-5" id="address">@Html.DisplayFor(model => model.Openhour)</label>
    </div>
    <div class="row">
        <h4 class="col-sm-4 text-right">@Html.DisplayNameFor(model => model.Phone):</h4> <label class="col-sm-5">@Html.DisplayFor(model => model.Phone)</label>
    </div>
 
</div>
@*<div class="text-center">

        <dl class="row">
            <dt >
             Address
            </dt>

            <dd >
                <p id="address">@Html.DisplayFor(model => model.Address1) @Html.DisplayFor(model => model.Address2) @Html.DisplayFor(model => model.Address3)</p>
            </dd>

            <dt >
                @Html.DisplayNameFor(model => model.Postcode):
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Postcode)
            </dd>
            <dt >
                @Html.DisplayNameFor(model => model.City):
            </dt>

            <dd >
                @Html.DisplayFor(model => model.City)
            </dd>

            <dt >
                @Html.DisplayNameFor(model => model.State):
            </dt>

            <dd >
                @Html.DisplayFor(model => model.State)
            </dd>

            <dt >
                @Html.DisplayNameFor(model => model.MainActivit):
            </dt>

            <dd >
                @Html.DisplayFor(model => model.MainActivit)
            </dd>

            <dt >
                @Html.DisplayNameFor(model => model.OtherActivity):
            </dt>

            <dd >
                @Html.DisplayFor(model => model.OtherActivity)
            </dd>


            <dt >
                @Html.DisplayNameFor(model => model.Purposes):
            </dt>

            <dd>
                @Html.DisplayFor(model => model.Purposes)
            </dd>




        </dl>


    </div>*@



@*<h2>Object moved to <a href="https://goo.gl/maps/SF6Y5BgtMgr">here</a>.</h2>
    <iframe src="https://www.google.com/maps/embed?pb=!1m28!1m12!1m3!1d100801.78587503325!2d144.98618167952606!3d-37.858984571724854!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m13!3e6!4m5!1s0x6ad642cb1fb82ba1%3A0xd009c8b5a5a8f8d0!2sMelbourne+Central+Station%2C+Melbourne+VIC!3m2!1d-37.8104277!2d144.9629153!4m5!1s0x6ad66acbf64673b9%3A0xfaf9b169a587104!2sMonash+University%2C+Scenic+Blvd%2C+Clayton+VIC+3800!3m2!1d-37.9105238!2d145.1362182!5e0!3m2!1sen!2sau!4v1523423046336" width="600" height="450" frameborder="0" style="border:0" allowfullscreen></iframe>*@
<div class="text-center">
    <h1 id="result"></h1>

</div>

<div id="floating-panel">


    <select id="mode" class="btn btn-success">
        <option value="DRIVING">Driving</option>
        <option value="WALKING">Walking</option>
        <option value="BICYCLING">Bicycling</option>
        <option value="TRANSIT">Transit</option>
    </select>
</div>
<div class="text-center">
<hr class="style-two" style="width:80%; margin-top:70px">
<h2 >Location map & Café Nearby</h2>
    </div>
<div id="right-panel"></div>
<div id="map"></div>
<div id="out"></div>


<script>
        var map;


        function initMap() {
            var directionsDisplay = new google.maps.DirectionsRenderer;
            var directionsService = new google.maps.DirectionsService;
            //var location = $("#address").text().toString();
            var location = "Monash campus"
            var address = $("#address").text().toString();
            var pyrmont = { lat: -33.866, lng: 151.196 };
            var geocoder = new google.maps.Geocoder();

            geocoder.geocode({ 'address': address }, function (results, status) {
                if (status === 'OK') {
                    map = new google.maps.Map(document.getElementById('map'), {
                        center: results[0].geometry.location,
                        zoom: 17
                    });


                    var bounds = new google.maps.LatLngBounds();
                    directionsDisplay.setMap(map);
                    directionsDisplay.setPanel(document.getElementById('right-panel'));

                    var control = document.getElementById('floating-panel');
                    control.style.display = 'block';
                    map.controls[google.maps.ControlPosition.TOP_CENTER].push(control);

                    calculateAndDisplayRoute(directionsService, directionsDisplay);
                    document.getElementById('mode').addEventListener('change', function () {
                        calculateAndDisplayRoute(directionsService, directionsDisplay);
                    });

                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }


                var service = new google.maps.places.PlacesService(map);
                service.nearbySearch({
                    location: results[0].geometry.location,
                    radius: 500,
                    type: ['cafe']
                }, processResults);

            });


            //setStart();

        }





        var final_latitude = 0;
        var final_longitude = 0;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError, {
                maximumAge: 0
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
        function showPosition(position) {
            var lati = position.coords.latitude;
            final_latitude = lati;
            var longi = position.coords.longitude;
            final_longitude = longi;

            calculateAndDisplayRoute();
        }


        function showError(error) {
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    alert("User denied the request for Geolocation.");
                    break;
                case error.POSITION_UNAVAILABLE:
                    alert("Location information is unavailable.");
                    break;
                case error.TIMEOUT:
                    alert("The request to get user location timed out.");
                    break;
                case error.UNKNOWN_ERROR:
                    alert("An unknown error occurred.");
                    break;
            }
        }



        function calculateAndDisplayRoute(directionsService, directionsDisplay) {
            var selectedMode = document.getElementById('mode').value;
            var start = new google.maps.LatLng(final_latitude, final_longitude);
            var end = $("#address").text();

            directionsService.route({
                origin: start,
                destination: end,
                //travelMode: 'DRIVING'
                travelMode: selectedMode
            }, function (response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });



        }



        // display the cafe restaurant point
        function processResults(results, status, pagination) {
            if (status !== google.maps.places.PlacesServiceStatus.OK) {
                return;
            } else {

                createMarkers(results);

            }
        }

        //create the point for cafe near by


        function createMarkers(places) {
            var bounds = new google.maps.LatLngBounds();


            for (var i = 0, place; place = places[i]; i++) {
                var image = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };

                var marker = new google.maps.Marker({
                    map: map,
                    icon: image,
                    title: place.name,
                    position: place.geometry.location,
                    animation: google.maps.Animation.DROP
                });

                //google.maps.event.addListener(image, 'click', function () {
                //    infowindow.setContent(places.name);
                //    infowindow.open(map, this);
                //});

                bounds.extend(place.geometry.location);
            }
            map.fitBounds(bounds);
        }


</script>
@*<script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAByi7wbsNEkpNZtepHeoiKdThuSoJpO40&callback=initMap">
    </script>*@

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAByi7wbsNEkpNZtepHeoiKdThuSoJpO40&libraries=places&callback=initMap" async defer></script>
